#lang racket
(list-ref '((1 2 3 4) (2 4 5) (3 6) (4 3 6 7) (5 4 7) (6) (7 6)) 0)

;Depth-first search
(define (dfs L1) ; '(1 2 3 4)
  L1
  )

(define (findStart L1)
  (if (member (caar L1) (cdr L1)) (findStart (cdr L1))
      (caar L1) 
      )
  )

; topoSort - Topological sort 
; Reads a graph info represented by adjacency list as input parameter.
(define (topoSort L1)
  (findStart L1)
  
      )

(topoSort '((1 2 3 4) (2 4 5) (3 6) (4 3 6 7) (5 4 7) (6) (7 6)))
;result = '(1 2 5 4 3 7 6)


(define (topsort L)
  (define G
    (make-hash
      L
      ))
  (reverse (topo-sort (clean G))
                 ))


 
(define (clean G)
  (define G* (hash-copy G))
  (for ([(from tos) G])
    ; remove self dependencies
    (hash-set! G* from (remove from tos))
    ; make sure all nodes are present in the ht
    (for ([to tos]) (hash-update! G* to (λ(_)_) '())))
  G*)
 
(define (incoming G)
  (define in (make-hash))
  (for* ([(from tos) G] [to tos])
    (hash-update! in to (λ(fs) (cons from fs)) '()))
  in)
 
(define (nodes G)       (hash-keys G))
(define (out G n)       (hash-ref G n '()))
(define (remove! G n m) (hash-set! G n (remove m (out G n))))
 
(define (topo-sort G)
  (define n (length (nodes G)))
  (define in (incoming G))
  (define (no-incoming? n) (empty? (hash-ref in n '())))
  (let loop ([L '()] [S (list->set (filter no-incoming? (nodes G)))])
    (cond [(set-empty? S)
           (if (= (length L) n)
               L
               (error 'topo-sort (~a "cycle detected" G)))]
          [else 
           (define n   (set-first S))
           (define S\n (set-rest S))                
           (for ([m (out G n)])
             (remove! G n m)
             (remove! in m n)
             (when (no-incoming? m)
               (set! S\n (set-add S\n m))))
           (loop (cons n L) S\n)])))
 
(topsort '((1 2 3 4) (2 4 5) (3 6) (4 3 6 7) (5 4 7) (6) (7 6)))